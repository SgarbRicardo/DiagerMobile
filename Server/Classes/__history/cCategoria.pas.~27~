unit cCategoria;

interface

uses Firedac.Comp.Client, System.SysUtils, Firedac.DApt, FMX.Graphics;

type
    TCategoria = class
      private
          FConn : TFDConnection;
          FDESCRICAO: STRING;
          FFOTO: TBitmap;
          FCATEGORIA_ID: INTEGER;
          FEquip_Description : STRING;

      public
           constructor Create (conn: TFDConnection);
           property CATEGORIA_ID: INTEGER read FCATEGORIA_ID write FCATEGORIA_ID;
           property FOTO: TBitmap read FFOTO write FFOTO;
           property DESCRICAO : STRING read FDESCRICAO write FDESCRICAO;
           property Equip_Description : STRING read FEquip_Description  write FEquip_Description;

          function ListaCategoria(order_by: string; out erro: string): TFDQuery;
end;


implementation
  { TCategoria }

constructor TCategoria.Create(conn: TFDConnection);
begin
     FConn := conn;
end;

function TCategoria.ListaCategoria(order_by: string; out erro : string): TFDQuery;
var
  qry : TFDQuery;
begin
  try
      qry := TFDQuery.Create(nil);
      qry.Connection := FConn;

      with  qry do
        begin
          Active := false;
          sql.Add('SELECT distinct C.Cat_Id, C.CAT_DESCRIPTION, C.CAT_PHOTO ');
          sql.Add('FROM [MF_Control].[mf_control_db].[CATEGORY] C');
          sql.Add('JOIN [MF_Control].[mf_control_db].[EQUIPMENT] E ON (E.Cat_Id = C.Cat_Id)');

        if order_by = '' then
            SQL.Add('ORDER BY C.CAT_DESCRIPTION')
        else
            SQL.Add('ORDER BY ' + Order_by);

        qry.Active := true;

        end;
         result := qry;
         erro:='';

    except on ex:exception do
    begin
        erro:= 'Erro carregar as Categorias: ' + ex.Message;
        result := nil;
    end;

  end;
end;

end.
