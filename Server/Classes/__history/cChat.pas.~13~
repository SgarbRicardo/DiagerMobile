unit cChat;

interface

uses FireDAC.Comp.Client, Data.DB, FMX.Graphics, Firedac.DApt;

type
    TChat = class
    private
        FConn : TFDConnection;
        FUSER_ID_TO: integer;
        FUSER_ID_FROM: integer;
        FUSER_ID: INTEGER;
        FDT_GENERATION: TDateTime;
        FID_CHAT: integer;
        FTEXT: string;

    public
        constructor Create(conn : TFDConnection);
        property ID_CHAT : integer read FID_CHAT write FID_CHAT;
        property USER_ID_FROM : integer read FUSER_ID_FROM write FUSER_ID_FROM;
        property USER_ID_TO : integer read FUSER_ID_TO write FUSER_ID_TO;
        property USER_ID : integer read FUSER_ID write FUSER_ID;
        property DT_GENERATION : TDateTime read FDT_GENERATION write FDT_GENERATION;
        property TEXT : string read FTEXT write FTEXT;

        function Inserir(out erro: string): Boolean;
        function Excluir(out erro: string): Boolean;
        function ListarChat(order_by: string; out erro: string): TFDQuery;
end;

implementation

uses
  System.SysUtils;


constructor TChat.Create(conn: TFDConnection);
begin
    FConn := conn;
end;

function TChat.ListarChat(order_by: string; out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
  {  if (ID_CHAT <= 0) then
    begin
      Result:= nil;
      erro:= 'Chat nao encontrado';
      exit;
    end;  }

    try
        qry := TFDQuery.Create(nil);
        qry.Connection := FConn;

        with qry do
        begin
            Active := false;
            sql.Clear;
            SQL.Add('SELECT * FROM [MF_Control].[mf_control_db].[TAB_CHAT]');
            SQL.Add('WHERE USER_ID_TO = :USER_ID_TO');

            if order_by = '' then
                SQL.Add('ORDER BY ID_CHAT')
            else
                SQL.Add('ORDER BY ' + order_by);

            ParamByName('USER_ID_TO').Value := USER_ID_TO;

            Active := true;
        end;

        erro := '';
        result := qry;

    except on ex:exception do
        begin
            erro := 'Erro ao listar mensagens: ' + ex.Message;
            Result := nil;
        end;
    end;
end;

function TChat.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
  {  if (USER_ID_FROM <= 0)  then
    begin
        Result := false;
        erro := 'Usuário origem não informado';
        exit;
    end; }

    if (USER_ID_TO <= 0)  then
    begin
        Result := false;
        erro := 'Usuário destino não informado';
        exit;
    end;

    if (USER_ID <= 0)  then
    begin
        Result := false;
        erro := 'Erro com o usuario loogado';
        exit;
    end;

    if (TEXT = '')  then
    begin
        Result := false;
        erro := 'Texto não informado';
        exit;
    end;

    try
        qry := TFDQuery.Create(nil);
        qry.Connection := FConn;

        with qry do
        begin
            Active := false;
            sql.Clear;
            SQL.Add('INSERT INTO [MF_Control].[mf_control_db].[TAB_CHAT](ID_USER_FROM, ID_USER_TO, USER_ID,');
            SQL.Add('DT_GENERATION, TEXT)');
            SQL.Add('VALUES(:USER_ID_FROM, :USER_ID_TO,:USER_ID, current_timestamp, :TEXT)');

            ParamByName('ID_USER_FROM').Value := USER_ID_FROM;
            ParamByName('ID_USER_TO').Value := USER_ID_TO;
            ParamByName('USER_ID').Value := USER_ID;
            ParamByName('TEXT').Value := TEXT;
            ExecSQL;


            // Busca o ID gerado...
            Active := false;
            sql.Clear;
            SQL.Add('SELECT MAX(ID_CHAT) AS ID_CHAT FROM [MF_Control].[mf_control_db].[TAB_CHAT]');
            SQL.Add('WHERE USER_ID=USER_ID');
            paramByName('user_id').Value := USER_ID;
            Active := true;

            ID_CHAT := FieldByName('ID_CHAT').AsInteger;

            DisposeOf;
        end;

        Result := true;
        erro := '';

    except on ex:exception do
        begin
            Result := false;
            erro := 'Erro ao inserir mensagem: ' + ex.Message;
        end;
    end;
end;

function TChat.Excluir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    if (ID_CHAT <= 0)  then
    begin
        Result := false;
        erro := 'Id da mensagem não informado';
        exit;
    end;

    try
        qry := TFDQuery.Create(nil);
        qry.Connection := FConn;

        with qry do
        begin
            Active := false;
            sql.Clear;
            SQL.Add('DELETE FROM TAB_CHAT WHERE ID_CHAT=:ID_CHAT');
            ParamByName('ID_CHAT').Value := ID_CHAT;
            ExecSQL;

            DisposeOf;
        end;

        Result := true;
        erro := '';

    except on ex:exception do
        begin
            Result := false;
            erro := 'Erro ao excluir mensagem: ' + ex.Message;
        end;
    end;
end;

end.
