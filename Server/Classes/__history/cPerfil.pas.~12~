unit cPerfil;

interface

uses Firedac.Comp.Client, System.SysUtils, Firedac.DApt, FMX.Graphics;

type
    TPerfil = class
      private

          FConn : TFDConnection;
          FDATA_ATE: STRING;
          FDATA_DE: STRING;
          FLOGIN_ID: INTEGER;
          FTEST_ID : INTEGER;

      public
           constructor Create (conn: TFDConnection);
           property LOGIN_ID: INTEGER read FLOGIN_ID write fLOGIN_ID;
           property TEST_ID: INTEGER read FTEST_ID write FTEST_ID;
           property DATA_DE: STRING read FDATA_DE write FDATA_DE;
           property DATA_ATE: STRING read FDATA_ATE write FDATA_ATE;
           function ListarTestes( out erro: string): TFDQuery;
end;


implementation
  { TPerfil }

constructor TPerfil.Create(conn: TFDConnection);
begin
     FConn := conn;
end;

function TPerfil.ListarTestes( out erro : string): TFDQuery;
var
  qry : TFDQuery;
begin
     try
      qry := TFDQuery.Create(nil);
      qry.Connection := FConn;

      with  qry do
      begin
          Active := false;
          sql.Clear;
          SQL.Add('SELECT count ( T.test_id)');
          SQL.Add('FROM [MF_Control].[mf_control_db].[test] as T');
          sql.Add('inner join[MF_Control].[mf_control_db].[userP] as L on T.login_id = L.user_id');
          sql.Add('where 1 = 1');
          ParamByName('T.test_id').Value := TEST_ID;

          if LOGIN_ID > 0 then
          BEGIN
            sql.Add('and T.login_id = :user_id ');
            ParamByName('login_id').Value := LOGIN_ID;
          END;

          if TEST_ID > 0 then
          BEGIN
            sql.Add('and T.test_id = :test_id ');
            ParamByName('test_id').Value := TEST_ID;
          END;

         { if (DATA_DE <> '') and (DATA_ATE <> '') then
          sql.Add('t.test_data between ''' + DATA_DE + ''' and '''+ DATA_ATE + '''');
           }
          Active := true;
      end;
         result := qry;
         erro:='';

    except on ex:exception do
    begin
        erro:= 'Erro carregar quantidade de testes realizados: ' + ex.Message;
        Result := nil;
    end;

    end;
end;

end.
